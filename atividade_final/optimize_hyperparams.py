#!/usr/bin/env python3
"""
Script para otimiza√ß√£o de hiperpar√¢metros do algoritmo gen√©tico.
Permite execu√ß√£o r√°pida com diferentes configura√ß√µes.
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent / 'src'))

from genetic_mlr import run_with_optimization
from src.logging_utils import get_logger
import argparse
import time

logger = get_logger('hyperopt')

def quick_optimization(n_trials: int = 30):
    """Executa otimiza√ß√£o r√°pida para teste."""
    logger.info(f"üöÄ Iniciando otimiza√ß√£o r√°pida com {n_trials} trials")
    start_time = time.time()
    
    results = run_with_optimization(optimize=True, n_trials=n_trials)
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è Otimiza√ß√£o conclu√≠da em {end_time - start_time:.1f} segundos")
    
    return results

def full_optimization(n_trials: int = 100):
    """Executa otimiza√ß√£o completa."""
    logger.info(f"üî• Iniciando otimiza√ß√£o completa com {n_trials} trials")
    start_time = time.time()
    
    results = run_with_optimization(optimize=True, n_trials=n_trials)
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è Otimiza√ß√£o conclu√≠da em {end_time - start_time:.1f} segundos")
    
    return results

def run_with_best_params():
    """Executa com os melhores par√¢metros salvos."""
    logger.info("‚ö° Executando com melhores par√¢metros salvos")
    start_time = time.time()
    
    results = run_with_optimization(optimize=False)
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è Execu√ß√£o conclu√≠da em {end_time - start_time:.1f} segundos")
    
    return results

def main():
    parser = argparse.ArgumentParser(description='Otimiza√ß√£o de Hiperpar√¢metros do Algoritmo Gen√©tico')
    parser.add_argument('mode', choices=['quick', 'full', 'best'], 
                       help='Modo de execu√ß√£o: quick (30 trials), full (100 trials), best (usar salvos)')
    parser.add_argument('--trials', type=int, 
                       help='N√∫mero customizado de trials (sobrescreve o padr√£o do modo)')
    
    args = parser.parse_args()
    
    if args.mode == 'quick':
        trials = args.trials or 30
        results = quick_optimization(trials)
    elif args.mode == 'full':
        trials = args.trials or 100
        results = full_optimization(trials)
    elif args.mode == 'best':
        results = run_with_best_params()
    
    # Relat√≥rio final
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO FINAL DA OTIMIZA√á√ÉO")
    print("="*60)
    print(f"R¬≤ Valida√ß√£o: {results['metrics_val']['R2']:.4f}")
    print(f"R¬≤ Teste: {results['metrics_test']['R2']:.4f}")
    print(f"MSE Valida√ß√£o: {results['metrics_val']['MSE']:.4f}")
    print(f"MAE Valida√ß√£o: {results['metrics_val']['MAE']:.4f}")
    print(f"Features selecionadas: {results['num_features']}")
    print(f"Melhores par√¢metros: {results['best_params']}")
    print("="*60)
    
    return results

if __name__ == "__main__":
    main() 